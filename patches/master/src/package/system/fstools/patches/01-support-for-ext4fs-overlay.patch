This change will enables eMMC (ext4 fs) boot support, when we try to boot
from eMMC card then it will read partition names from
/sys/block/mmcblkX/mmcblkXY/uevent
file and will mount the rootfs_data partition as ext4fs overlay.

Signed-off-by: Ram Chandra Jangir <rjangi at codeaurora.org>
---

change in v2:
fixed space indentation
removed mkfs.ext4 code of lines
Added volume type enum EXT4VOLUME
---

 CMakeLists.txt          |   1 +
 libfstools/ext4.c       | 193 ++++++++++++++++++++++++++++++++++++++++++++++++
 libfstools/volume.h     |   1 +
 3 files changed, 184 insertions(+), 0 deletion(-)
 create mode 100644 libfstools/ext4.c

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a6002e5..5117e8e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,6 +11,7 @@ ADD_LIBRARY(fstools SHARED
 		libfstools/overlay.c
 		libfstools/volume.c
 		libfstools/mtd.c
+		libfstools/ext4.c
 		libfstools/mount.c
 		libfstools/ubi.c
 		libfstools/find.c)
diff --git a/libfstools/ext4.c b/libfstools/ext4.c
new file mode 100644
index 0000000..f648aa8
--- /dev/null
+++ b/libfstools/ext4.c
@@ -0,0 +1,193 @@
+/*
+ * Copyright (c) 2016, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+*/
+
+
+#include <sys/mount.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <asm/byteorder.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <mtd/mtd-user.h>
+#include <glob.h>
+
+#include "libfstools.h"
+
+#include "volume.h"
+
+#define ext4_sysfs_path "/sys/block/mmcblk*/mmcblk*/uevent"
+#define MAX_SIZE	128
+
+#define EXT_SB_OFF	0x400
+#define EXT_SB_KBOFF	(EXT_SB_OFF >> 10)
+#define EXT_SB_MAGIC	"\123\357"
+#define EXT_MAG_OFF	0x38
+
+struct ext4_volume {
+	struct volume v;
+	char	*name;
+	char    *devname;
+};
+
+static struct driver ext4_driver;
+
+static int ext4_volume_init(struct volume *v)
+{
+	struct ext4_volume *p = container_of(v, struct ext4_volume, v);
+	char buf[MAX_SIZE] = {0};
+
+	snprintf(buf, sizeof(buf), "/dev/%s", p->devname);
+
+	v->name = strdup(p->name);
+	v->type = EXT4VOLUME;
+	v->blk = strdup(buf);
+	
+	return 0;
+}
+
+static int
+ext4_part_match(char *dev, char *name, char *filename)
+{
+	FILE *fp;
+	char buf[MAX_SIZE];
+	char devname[MAX_SIZE];
+	int i;
+	int ret = -1;
+
+	fp = fopen(filename, "r");
+	if (!fp)
+		return ret;
+
+	while (fgets(buf, sizeof(buf), fp))  {
+		if (strstr(buf, "DEVNAME"))  {
+			strcpy(devname, buf + strlen("DEVNAME="));
+			continue;
+		}
+		/* Match partition name */
+		if (strstr(buf, name))  {
+			ret = 0;
+			break;
+		}
+	}
+
+	fclose(fp);
+
+	/* make sure the string is \0 terminated */
+	devname[sizeof(devname) - 1] = '\0';
+
+	/* remove trailing whitespace */
+	i = strlen(devname) - 1;
+	while (i > 0 && devname[i] <= ' ')
+		devname[i--] = '\0';
+
+	strcpy(dev, devname);
+	return ret;
+}
+
+static int ext4_find_devname(char *dev, char *name)
+{
+	int i;
+	glob_t gl;
+
+	if (glob(ext4_sysfs_path, GLOB_NOESCAPE | GLOB_MARK, NULL, &gl) < 0)
+		return -1;
+
+	for (i = 0; i < gl.gl_pathc; i++) {
+		if (!ext4_part_match(dev, name, gl.gl_pathv[i])) {
+			globfree(&gl);
+			return 0;
+		}
+	}
+
+	globfree(&gl);
+	return -1;
+}
+
+static struct volume *ext4_volume_find(char *name)
+{
+	char buf[MAX_SIZE] = {0};
+	struct ext4_volume *p;
+	struct volume *v;
+
+	if (find_filesystem("ext4"))
+		return NULL;
+
+	if (ext4_find_devname(buf, name))
+		return NULL;
+
+	p = calloc(1, sizeof(struct ext4_volume));
+	if (!p)
+	{
+		return NULL;
+	}
+
+	p->name = strdup(name);
+	p->devname = strdup(buf);
+	v = &p->v;
+	v->drv = &ext4_driver;
+
+	ext4_volume_init(v);
+	
+	return v;
+}
+
+static int ext4_volume_identify(struct volume *v)
+{
+	char magic[32] = { 0 };
+	int off = (EXT_SB_KBOFF * 1024) + EXT_MAG_OFF;
+	int fd;
+
+	fd = open(v->blk, O_RDONLY);
+	if (fd == -1)
+		return -1;
+
+	lseek(fd, off, SEEK_SET);
+	if(read(fd, magic, sizeof(EXT_SB_MAGIC) - 1) <= 0)
+	{
+		//
+	}
+	close(fd);
+
+	if (v->type == EXT4VOLUME &&
+	    !memcmp(EXT_SB_MAGIC, magic, sizeof(EXT_SB_MAGIC) - 1)) {
+		return FS_EXT4;
+	}
+	else
+	{
+		char str[128];
+		
+		snprintf(str, sizeof(str), "mkfs.ext4 -F -q -L rootfs_data %s", v->blk);
+
+		if(system(str) != 0)
+		{
+			//
+		}
+	}
+
+	return FS_EXT4;
+}
+
+static struct driver ext4_driver = {
+	.name = "ext4",
+	.find = ext4_volume_find,
+	.init = ext4_volume_init,
+	.identify = ext4_volume_identify,
+};
+
+DRIVER(ext4_driver);
+
diff --git a/libfstools/volume.h b/libfstools/volume.h
index 9c679f7..b74bd50 100644
--- a/libfstools/volume.h
+++ b/libfstools/volume.h
@@ -47,6 +47,7 @@
 	NANDFLASH,
 	NORFLASH,
 	UBIVOLUME,
+	EXT4VOLUME,
 	BLOCKDEV,
 };
 
